import * from Minecraft;
import * from minecraft.CommandUtils;
import * from util.FormatUtils;
// Crafting screen's output slot number is always 0
// player.clickSlot(0, 'right', 'throw'); // right click - click data 1 indicates ctrl+Q

class ShulkerUtils {
    //shulker parsing / validify utils
    static fun getShulkerFromPlayerSlot(player, slot){
        if(slot == -999){
            return null;
        }
        itemStack = player.getItemForSlot(slot);
        if (itemStack.getId().contains('shulker_box')){
            return itemStack;
        }
        return null;
    }
    static fun parseShulkerNbt(itemStack){
        if(itemStack == null){
            return null;
        }
        nbt = itemStack.getNbt();
        if(nbt.isEmpty() || nbt == null){
            return null;
        }
        entityTag = nbt.get('BlockEntityTag');
        if(entityTag == null){
            return null;
        }
        itemList = entityTag.get('Items');
        return itemList;
    }
}

//Debug purpose
//new GameEvent('onClickRecipe', fun(newrecipe){if(recipe != newrecipe){recipe = newrecipe;doSomething();}}).register();
//new GameEvent('onClickSlot', fun(slot){sendMessageUnique(new Inventory(new Inventory(parseShulkerNbt(getShulkerFromPlayerSlot(slot))).merged()).formatted());}).register();


class CombinedInventory {
    var inventories = {};
    var mergedInventory = new Inventory();
    CombinedInventory(){

    }
    CombinedInventory(object){
        prepare = new Inventory();
        //expect empty inventories too
        i = 0;
        if(Type.of(object).getName() == 'List'){
            foreach(inventory : fromList){
                inv = new Inventory(inventory);
                this.inventories.put(i, inv);
                prepare = prepare.add(inv);
                i++;
            }
        }
        else if (Type.of(object).getName() == 'Map'){
            //expect slotNum : itemStack
            foreach (slotNum : object.getKeys()){
                inv = new Inventory(object.get(slotNum));
                this.inventories.put(slotNum, inv);
                prepare = prepare.add(inv);
            }
        }
        this.mergedInventory = prepare;
    }
    static fun getPlayerInventory(player){
        mapping = {};
        for (i = 0; i < player.getTotalSlots(); i++){
            stack = player.getItemForSlot(i);
            mapping.put(i, stack);
        }
        return new CombinedInventory(mapping);
    }
}
class Inventory {
    //inventory class that can be constructed from : player, Map with BlockEntityTag, List, single itemStack
    //This will construct slotId : itemStack map.

    var internalInventory = {}; // {slotNum : stack}
    var mergedInventory = []; //this merges items without nbt into counts and sorts
    Inventory(){
        //empty constructor
    }
    Inventory(inheritA, inheritB){
        this.internalInventory = inheritA.copy();
        this.mergedInventory = inheritB.copy();
    }
    Inventory(object){
        type = Type.of(object).getName();
        if (type == 'Map'){
            itemList = object.get('BlockEntityTag');
            if (itemList != null){
                this.internalInventory = Inventory.parseItemList(itemList.get('Items'));
            }
            else {
                if (object.get('Items') != null){
                    this.internalInventory = Inventory.parseItemList(object.get('Items'));
                }
                else if (object.get('id') != null) {
                    this.internalInventory = Inventory.fromSingleStack(object);
                }
                else {
                    //expect namedId : count
                    this.internalInventory = Inventory.parseSimpleMapping(object);
                }
            }
        }
        else if (type == 'List'){
            this.internalInventory = Inventory.parseItemList(object);
        }
        else if (type == 'Inventory'){
            this.internalInventory = object.internalInventory.copy();
        }
        else if (type == 'ItemStack'){
            shulkerInv = parseShulkerNbt(object);
            count = object.getCount();
            if(shulkerInv != null){
                this.internalInventory = Inventory.multMap(Inventory.parseItemList(shulkerInv), count);
            }
            else {
                this.internalInventory = Inventory.singleStackOf(object);
            }
        }
        this.mergedInventory = Inventory.sort(this.internalInventory);
    }
    static fun parseItemList(itemList){
        prepare = {};
        i = 0;
        foreach (item : itemList){
            slotNum = item.get('Slot');
            if(slotNum == null){
                slotNum = i;
                i++;
            }
            tag = item.get('tag');
            if(tag == null){
                itemStack = ItemStack.parse({'id' : item.get('id'), 'Count' : 1});
                itemStack.setStackSize(item.get('Count'));
                prepare.put(slotNum, itemStack);
            }
            else {
                itemStack = ItemStack.parse({'id' : item.get('id'), 'Count' : 1, 'tag' : tag});
                itemStack.setStackSize(item.get('Count'));
                prepare.put(slotNum, itemStack);
            }
        }
        return prepare;
    }
    static fun parseSimpleMapping(mapping){
        retVal = {};
        i = 0;
        foreach ( keys : mapping.getKeys()){
            count = mapping.get(keys);
            itemStack = ItemStack.parse({'id' : keys, 'Count' : count});
            retVal.put(i, itemStack);
            i++;
        }
        return retVal;
    }
    static fun fromSingleStack(mapping){
        return {0 : ItemStack.parse(mapping)};
    }
    static fun singleStackOf(stack){
        return {0 : stack.copy()};
    }
    static fun sortWithoutNbt(mapping){
        //returns simple {id : count}
        foreach (itemStack : mapping.getValues()){
            if (!itemStack.getNbt().isEmpty()){
                continue;
            }
            id = itemStack.getFullId();
            count = itemStack.getCount();
            if (retVal.get(id) == null){
                retVal.put(id, count);
            }
            else {
                retVal.put(id, count + retVal.get(id));
            }
        }
        return retVal;
    }
    static fun sort(mapping){
        //we don't have sort function sadly, so temporarily just merge
        retVal = {};
        retList = [];
        foreach (itemStack : mapping.getValues()){
            if (!itemStack.getNbt().isEmpty()){
                continue;
            }
            id = itemStack.getFullId();
            count = itemStack.getCount();
            if (retVal.get(id) == null){
                retVal.put(id, count);
            }
            else {
                retVal.put(id, count + retVal.get(id));
            }
        }
        foreach (id : retVal.getKeys()){
            retList.append({'id' : id, 'Count' : retVal.get(id)});
        }
        foreach (itemStack : mapping.getValues()){
            if (itemStack.getNbt().isEmpty()){
                continue;
            }
            id = itemStack.getFullId();
            count = itemStack.getCount();
            tag = itemStack.getNbt();
            retList.append({'id' : id, 'Count' : count, 'tag' : tag});
        }
        return retList;
    }
    fun formatted(){
        return FormatUtil.showMap(this.internalInventory);
    }
    fun formatMerged(){
        return FormatUtil.showList(this.mergedInventory);
    }
    fun merged(){
        return this.mergedInventory.copy();
    }
    fun add(target){
        //this does not return expanded inventory. instead, it only returns merged, and recostructed inventory
        if (Type.of(target).getName() != 'Inventory'){
            target = new Inventory(otherInventory);
        }
        baseList = Inventory.sort(this.internalInventory).copy();
        baseList.addAll(Inventory.sort(target.internalInventory));
        return new Inventory(baseList);
    }
    fun mult(value : Number){
        mapA = Inventory.multMap(this.internalInventory, value);
        mapB = Inventory.multList(this.mergedInventory, value);
        return new Inventory(mapA, mapB);
    }
    fun subtractAndReturn(target){
        //A.subtract(B) -> returns [remainder, remainder]
        if (Type.of(target).getName() != 'Inventory'){
            target = new Inventory(otherInventory);
        } //merged
        base = Inventory.sortWithoutNbt(this.internalInventory).copy(); //merged
        other = Inventory.sortWithoutNbt(target.internalInventory).copy(); //other merged
        foreach (keyA : base){
            foreach (keyB : other){
                if(keyA == keyB){
                    amountA = base.get(keyA);
                    amountB = other.get(keyB);
                    if (amountA >= amountB){
                        base.put(keyA,amountA - amountB);
                        other.delete(keyB);
                    }
                    else {
                        base.delete(keyA);
                        other.put(amountB - amountA);
                    }
                    break;
                }
            }
        }
        return [new Inventory(base), new Inventory(other)];
    }
    static fun multMap(mapping, value){
        mapA = {};
        foreach ( slotNum : mapping.getKeys()){
            val = mapping.get(slotNum).copy();
            if(Type.of(val).getName() == 'ItemStack'){
                val.setStackSize(val.getCount() * value);
            }
            else {
                val.put('Count', Math.ceil(val.get('Count') * value));
            }
            mapA.put(slotNum, val);
        }
        return mapA;
    }
    static fun multList(listing, value){
        mapB = [];
        foreach ( values : listing){
            val = values.copy();
            if(Type.of(val).getName() == 'ItemStack'){
                val.setStackSize(val.getCount() * value);
            }
            else {
                val.put('Count', Math.ceil(val.get('Count') * value));
            }
            mapB.append(val);
        }
        return mapB;
    }
}
