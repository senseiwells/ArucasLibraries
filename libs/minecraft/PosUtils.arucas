enum Axis {
    X,
    Y,
    Z,
    NONE;
}
enum Direction {
    DOWN(0, -1, 0, Axis.Y),
    UP(0, 1, 0, Axis.Y),
    NORTH(0, 0, -1, Axis.Z),
    SOUTH(0, 0, 1, Axis.Z),
    WEST(-1, 0, 0, Axis.X),
    EAST(1, 0, 0, Axis.X),
    NONE(0, 0, 0, Axis.NONE); //Actual ordinals of minecraft directions.

    var vector;
    var axis;
    Direction(x, y, z, axis) {
        this.vector = new Pos(x, y, z);
        this.axis = axis;
    }

    fun getOpposite() {
        switch (this) {
            case Direction.NORTH -> return Direction.SOUTH;
            case Direction.SOUTH -> return Direction.NORTH;
            case Direction.EAST -> return Direction.WEST;
            case Direction.WEST -> return Direction.EAST;
            case Direction.UP -> return Direction.DOWN;
            case Direction.DOWN -> return Direction.UP;
        }
        return Direction.NONE;
    }

    fun right() {
        switch(this) {
            case Direction.NORTH -> return Direction.EAST;
            case Direction.EAST -> return Direction.SOUTH;
            case Direction.SOUTH -> return Direction.WEST;
            case Direction.WEST -> return Direction.NORTH;
        }
        return Direction.NONE;
    }

    fun rotateYClockwise() {
        return this.right();
    }

    fun left() {
        switch(this) {
            case Direction.NORTH -> return Direction.WEST;
            case Direction.WEST -> return Direction.SOUTH;
            case Direction.SOUTH -> return Direction.EAST;
            case Direction.EAST -> return Direction.NORTH;
        }
        return Direction.NONE;
    }
    fun rotateYCounterclockwise() {
        return this.left();
    }

    fun getAxis(){
        return this.axis;
    }

    fun asVector() {
        return this.vector.copy();
    }

    fun unitVec(){
        return this.vector.copy();
    }

    fun getX() {
        return this.vector.getX();
    }

    fun getY() {
        return this.vector.getY();
    }

    fun getZ() {
        return this.vector.getZ();
    }

    fun toString() {
        return this.getName().lowercase();
    }

    fun isValid(){
        return this != Direction.NONE;
    }

    fun mult(value){
        return this.vector.multiply(value);
    }

    fun multiply(value){
        return this.vector.multiply(value);
    }

    fun equals(other){
        return this == other;
    }

    static fun getEntityFacingFirst(entity) {
        facing = Direction.getEntityFacingOrdered(entity);
        if (facing.isEmpty()) {
            return Direction.NONE;
        }
        return facing[0];
    }

    static fun getEntityFacingOrdered(entity) {
        if (entity.instanceOf(Entity.type)) {
            pitch = entity.getPitch() * (Math.pi / 180);
            yaw = -1 * entity.getYaw() * (Math.pi / 180);
            pSin, pCos, ySin, yCos = [Math.sin(pitch), Math.cos(pitch), Math.sin(yaw), Math.cos(yaw)];

            x, y, z = [null, null, null];
            if (ySin > 0) {
                x = Direction.EAST;
            } else {
                x = Direction.WEST;
                ySin = -ySin;
            }
            if (pSin < 0) {
                y = Direction.UP;
                pSin = -pSin;
            } else {
                y = Direction.DOWN;
            }
            if (yCos > 0) {
                z = Direction.SOUTH;
            } else {
                z = Direction.NORTH;
                yCos = -yCos;
            }

            theta = ySin * pCos;
            omega = yCos * pCos;
            if (ySin > yCos) {
                if (pSin > theta) {
                    return Direction.listClosest(y, x, z);
                } else if (omega > pSin) {
                    return Direction.listClosest(x, z, y);
                }
                return Direction.listClosest(x, y, z);
            } else if (pSin > omega) {
                return Direction.listClosest(y, z, x);
            } else if (theta > pSin) {
                return Direction.listClosest(z, x, y);
            }
            return Direction.listClosest(z, y, x);

        }
        return [];
    }

    static fun listClosest(first, second, third) {
        return [first, second, third, third.getOpposite(), second.getOpposite(), first.getOpposite()];
    }

    static fun fromString(string) {
        if (Type.of(string) == String.type) {
            switch(string.lowercase()) {
                case "north" -> return Direction.NORTH;
                case "east" -> return Direction.EAST;
                case "south" -> return Direction.SOUTH;
                case "west" -> return Direction.WEST;
                case "up" -> return Direction.UP;
                case "down" -> return Direction.DOWN;
            }
        }
        return Direction.NONE;
    }
    static fun values(){
        return [Direction.UP, Direction.DOWN, Direction.EAST, Direction.WEST, Direction.SOUTH, Direction.NORTH];
    }
    static fun horizontal(){
        return [Direction.EAST, Direction.WEST, Direction.SOUTH, Direction.NORTH];
    }
}


class PosWithFun {
    //Extended PosWithFun class
    var x;
    var y;
    var z;
    var pos : Pos = new Pos(0,0,0);
    as Pos{
        return this.pos;
    }
    PosWithFun(x, y, z){
        this.x = x;
        this.y = y;
        this.z = z;
        this.pos = new Pos(x,y,z);
    }
    PosWithFun(pos){
        if (Type.of(pos).getName() == 'List'){
            pos = PosWithFun.getPos(pos);
        }
        this.x = pos.getX();
        this.y = pos.getY();
        this.z = pos.getZ();
        this.pos = new Pos(this.x,this.y,this.z);
    }
    static fun getPos(value){
        if (Type.of(value).getName() == 'List'){
            print(value);
            return new Pos(value.get(0), value.get(1), value.get(2));
        }
        return new Pos(value.getX(),value.getY(),value.getZ());
    }

    fun getX(){
        //compat with pos
        return this.x;
    }
    fun getY(){
        return this.y;
    }
    fun getZ(){
        return this.z;
    }
    fun add(other){
        return new PosWithFun(this.x + other.getX(), this.y + other.getY(), this.z + other.getZ());
    }
    fun add(x,y,z){
        return new PosWithFun(this.x +x, this.y + y, this.z + z);
    }
    fun internalAdd(x,y,z,p){
        return new PosWithFun(this.x + x * p, this.y + y * p, this.z + z * p);
    }
    fun internalAdd(other, p){
        return new PosWithFun(this.x + other.getX() * p, this.y + other.getY() * p, this.z + other.getZ() * p);
    }
    fun subtract(other){
        return new PosWithFun(this.x - other.getX(), this.y - other.getY(), this.z - other.getZ());
    }
    fun distanceTo(otherPos){
        dx = otherPos.getX() - this.x;
        dy = otherPos.getY() - this.y;
        dz = otherPos.getZ() - this.z;
        return (dx ^2 + dy ^2 + dz ^2) ^ 0.5;
    }
    fun asCenter(){
        return new PosWithFun(this.x + 0.5, this.y + 0.5, this.z + 0.5);
    } // Explicit same type casting

    fun getSidePos(direction){ //for Wall Mounted Blocks vanilla protocol
        //we expect Direction object here
        return this.asCenter().offset(direction, 0.5);
    } // Explicit same type casting
    fun mult(integer){
        return new PosWithFun(this.x * integer, this.y * integer, this.z * integer);
    }
    fun asPos(){
        return new Pos(this.x, this.y, this.z);
    } //explicit casting
    fun asJavaPos(){
        return Java.constructClass('net.minecraft.util.math.BlockPos',this.x, this.y, this.z);
    }//conversion
    fun formatted(){
        return 'x '+ this.x + ' y' + this.y + ' z' + this.z;
    }
    fun copy(){
        return new PosWithFun(this.x, this.y, this.z);
    }
    fun offset(direction){
        //south +z north -z west -x east +x
        return this.add(direction.asVector());
    }
    fun offset(direction, amount){
        return this.internalAdd(direction, amount);
    }
    fun multiply(amount){
        //compat
        return this.mult(amount);
    }
    fun up(){
        return this.add(Direction.UP);
    }
    fun down(){
        return this.add(Direction.DOWN);
    }
    fun up(int){
        return this.offset(Direction.UP, int);
    }
    fun down(int){
        return this.offset(Direction.DOWN, int);
    }
    fun east(){
        return this.add(Direction.EAST);
    }
    fun west(){
        return this.add(Direction.WEST);
    }
    fun east(int){
        return this.offset(Direction.EAST, int);
    }
    fun west(int){
        return this.offset(Direction.WEST, int);
    }
    fun north(){
        return this.add(Direction.NORTH);
    }
    fun south(){
        return this.add(Direction.SOUTH);
    }
    fun north(int){
        return this.offset(Direction.NORTH, int);
    }
    fun isNear(entity, distance){
        pos = entity.getPos();
        return this.distanceTo(pos) < distance;
    }

    fun south(int){
        return this.offset(Direction.SOUTH, int);
    }
    fun getMinPos(otherPos){ //Compare two positions to get Minimum position (Box)
        return new PosWithFun(Math.min(this.x, otherPos.x),Math.min(this.y, otherPos.y),Math.min(this.z, otherPos.z) );
    }
    fun getMaxPos(otherPos){
        return new PosWithFun(Math.max(this.x, otherPos.x),Math.max(this.y, otherPos.y),Math.max(this.z, otherPos.z) );
    }
    fun equals(otherPos){
        return this.x == otherPos.x && this.y == otherPos.y && this.z == otherPos.z;
    }
}
class PosWithDirection{
    // Utility class that holds Position and Direction information
    var x;
    var y;
    var z;
    var pos : Pos = new Pos(0,0,0);
    var direction = Direction.NONE;
    as Pos{
        return this.pos;
    }
    as Direction{
        return this.direction;
    }
    PosWithDirection(x, y, z){
        this.x = x;
        this.y = y;
        this.z = z;
        this.pos = new Pos(x,y,z);
    }
    PosWithDirection(x, y, z, direction){
        this.x = x;
        this.y = y;
        this.z = z;
        this.pos = new Pos(x,y,z);
        this.direction = direction;
    }
    PosWithDirection(pos){
        this.x = pos.getX();
        this.y = pos.getY();
        this.z = pos.getZ();
        this.pos = new Pos(this.x,this.y,this.z);
    }
    PosWithDirection(pos, direction){
        this.x = pos.getX();
        this.y = pos.getY();
        this.z = pos.getZ();
        this.pos = new Pos(this.x,this.y,this.z);
        this.direction = direction;
    }
    fun getX(){
        //compat with pos
        return this.x;
    }
    fun getY(){
        return this.y;
    }
    fun getZ(){
        return this.z;
    }
    fun getDirection(){
        return this.direction;
    }
    fun add(other){
        return new PosWithDirection(this.x + other.getX(), this.y + other.getY(), this.z + other.getZ(), this.direction);
    }
    fun subtract(other){
        return new PosWithDirection(this.x - other.getX(), this.y - other.getY(), this.z - other.getZ(), this.direction);
    }
    fun distanceTo(otherPos){
        dx = otherPos.getX() - this.x;
        dy = otherPos.getY() - this.y;
        dz = otherPos.getZ() - this.z;
        return (dx ^2 + dy ^2 + dz ^2) ^ 0.5;
    }
    fun isNear(entity){
        pos = entity.getPos();
        dist = this.distanceTo(pos);
        return dist < 4.5;//player reach
    }
    fun asCenter(){
        return new PosWithFun(this.x + 0.5, this.y + 0.5, this.z + 0.5);
    } // sometimes you need this?
    fun getSidePos(direction){ //for Wall Mounted Blocks vanilla protocol
        //we expect Direction object here
        return this.asCenter().offset(direction, 0.5);
    }
    fun isNear(entity, distance){
        pos = entity.getPos();
        return this.distanceTo(pos) < distance;
    }
    fun mult(integer){
        return new PosWithDirection(this.x * integer, this.y * integer, this.z * integer, this.direction);
    }
    fun asPos(){
        return new Pos(this.x, this.y, this.z);
    }
    fun asJavaPos(){
        return Java.constructClass('net.minecraft.util.math.BlockPos',this.x, this.y, this.z);
    }//conversion
    fun formatted(){
        return 'x '+ this.x + ' y' + this.y + ' z' + this.z + ' ' + this.direction.fromString;
    }
    fun copy(){
        return new PosWithDirection(this.x, this.y, this.z);
    }
    fun offset(){
        return this.add(this.direction.asVector());
    }
    fun offset(direction){
        //south +z north -z west -x east +x
        return this.add(direction.asVector());
    }
    fun offset(direction, amount){
        return this.add(direction.asVector().mult(amount));
    }
    fun up(){
        return this.add(Direction.UP);
    }
    fun down(){
        return this.add(Direction.DOWN);
    }
    fun getMinPos(otherPos){ //Compare two positions to get Minimum position (Box)
        return new PosWithDirection(Math.min(this.x, otherPos.x),Math.min(this.y, otherPos.y),Math.min(this.z, otherPos.z) );
    }
    fun getMaxPos(otherPos){
        return new PosWithDirection(Math.max(this.x, otherPos.x),Math.max(this.y, otherPos.y),Math.max(this.z, otherPos.z) );
    }
    fun equals(otherPos){
        return this.x == otherPos.x && this.y == otherPos.y && this.z == otherPos.z;
    }
}
