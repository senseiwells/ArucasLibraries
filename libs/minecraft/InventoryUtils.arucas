import * from minecraft.MinecraftUtils;
import * from util.Collections;
class InventoryUtil {
    var player;
    var debug = false;
    var selectedSlot = null;
    //class InventoryUtil does not offer static method, instead, it offers player-related options based on binded player entity
    //Please never use setSeletedSlot outside! or, use sync() to refresh selected slot!
    InventoryUtil(player){
        this.player = player;
    }
    fun sync(){
        this.selectedSlot = this.player.getCurrentSlot();
    }
    fun optionalSelectedSlot(){
        if (this.selectedSlot == null){
            this.selectedSlot = this.player.getCurrentSlot();
        }
        return this.selectedSlot;
    }
    fun isInHotbar(itemString){
        foreach(i : [0,1,2,3,4,5,6,7,8]){
            if(this.player.getItemForPlayerSlot(i).getId().contains(itemString)){
                return i;
            }
        }
        return null;
    }
    fun sendDebugMessage(string){
        if (this.debug){
            this.player.message(string);
        }
    }
    fun swapToItem(itemString){
        if (this.player.getItemForSlot(this.optionalSelectedSlot() + 36).getId() == itemString){
            this.sendDebugMessage("Already had item " + itemString +" in current slot");
            return true;
        }
        if (itemString == "air") {
            this.swapToPickaxe();
            return true;
        }
        foreach(i : [0,1,2,3,4,5,6,7,8]){
            if(this.player.getItemForPlayerSlot(i).getId() == itemString){
                this.player.setSelectedSlot(i);
                this.selectedSlot = i;
                this.sendDebugMessage("Changed to slot " + i + " for "+ itemString);
                return true;
            }
        }
        slot = this.player.getSlotFor(ItemStack.of(Material.of(itemString)));
        retVal = false;
        if (slot == null) {
            if (this.player.getGamemode() == 'creative'){
                this.sendDebugMessage("Clicked creative slot");
                this.player.clickCreativeStack(ItemStack.of(Material.of(itemString)), 36 + this.optionalSelectedSlot());
                return true;
            }
        }
        if (slot != null) {
            if (0 <= slot-36 && slot-36  <= 8) {
                this.player.setSelectedSlot(slot-36);
                this.selectedSlot = slot-36;
                this.sendDebugMessage("Changed to slot " + (slot - 36) + " for "+ itemString);
                return true;
            }
            else {
                preslot = this.player.getSwappableHotbarSlot();
                this.player.swapPlayerSlotWithHotbar(slot);
                this.player.setSelectedSlot(preslot);
                this.selectedSlot = preslot;
                this.sendDebugMessage("swapped to slot " + slot + " for "+ itemString);
                return true;
            }
        }
        return null;
    }
    fun checkItem(itemString){
        if (this.player.getGamemode() == 'creative'){
            return true;
        }
        if (this.player.getItemForSlot(this.optionalSelectedSlot() + 36).getId() == itemString){
            return true;
        }
        foreach(i : [0,1,2,3,4,5,6,7,8]){
            if(this.player.getItemForPlayerSlot(i).getId() == itemString){
                return true;
            }
        }
        slot = this.player.getSlotFor(ItemStack.of(Material.of(itemString)));
        retVal = false;
        if (slot == null) {
            this.player.message('Pickaxe Item was not found');
            return false;
        }
        if (slot != null) {
            if (0 <= slot-36 && slot-36  <= 8) {
                return true;
            }
            else {
                preslot = this.player.getSwappableHotbarSlot();
                return true;
            }
        }
        this.player.message('Item ' +itemString +' was not found');
        return null;
    }
    // Swaps to pickaxe.
    fun swapToPickaxe(){
        if (this.player.getItemForSlot(this.optionalSelectedSlot() + 36).getId().contains("pickaxe")){
            this.sendDebugMessage("Already had pickaxe in current slot");
            return true;
        }
        slot = null;
        foreach (picks : MaterialUtils.getPickaxes()){
            slot = this.player.getSlotFor(ItemStack.of(picks));
            if (slot != null){
                break;
            }
        }
        if (slot != null) {
            if (0 <= slot-36 && slot-36  <= 8) {
                this.sendDebugMessage("Selected slot "+ (slot - 36) + " for pickaxe");
                this.player.setSelectedSlot(slot-36);
                this.selectedSlot = slot - 36;
                return true;
            }
            else {
                preslot = this.player.getSwappableHotbarSlot();
                this.sendDebugMessage("Swapped with slot "+ slot+ " for pickaxe");
                this.player.swapPlayerSlotWithHotbar(slot);
                this.player.setSelectedSlot(preslot);
                this.selectedSlot = preslot;
                return true;
            }
        }
        if (slot == null) {
            if (this.player.getGamemode() == 'creative'){
                preslot = this.player.getSwappableHotbarSlot();
                //deprecated
                this.player.clickCreativeStack(ItemStack.of(Material.of("netherite_pickaxe")), 36 + preslot);
                this.player.setSelectedSlot(preslot);
                this.selectedSlot = preslot;
                return true;
            }
        }
        return false;
    }
    fun checkPickaxe(){
        if(this.player.getGamemode() == 'creative'){
            return true;
        }
        if (this.player.getItemForSlot(this.optionalSelectedSlot() + 36).getId().contains("pickaxe")){
            return true;
        }
        slot = null;
        foreach (picks : MaterialUtils.getPickaxes()){
            slot = this.player.getSlotFor(ItemStack.of(picks));
            if (slot != null){
                break;
            }
        }
        if (slot != null) {
            return true;
        }
        this.player.message('Pickaxe Item was not found');
        return false;
    }
    fun assertItem(itemString){
        this.swapToItem(itemString);
        return this.player.getItemForSlot(this.optionalSelectedSlot() + 36).getId() == itemString;
    }

    fun assertTool(){
        this.swapToPickaxe();
        return this.player.getItemForSlot(this.optionalSelectedSlot() + 36).getId().contains('pickaxe');
    }
}
