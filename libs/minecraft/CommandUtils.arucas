import * from Minecraft;
import IndexError, TypeError from util.Errors;
import Deque, ImmutableList, ImmutableMap from util.Collections;

// checks all arguments have unique names
fun checkArguments(iterable: Iterable) {
    arguments = Set.of();
    foreach(i : iterable) {
        if  (arguments.contains(i)){
            // Check Argument has Unique names, prevent client crash?
            throw new Error("Arguments name should have unique names!");
        }
        arguments.add(i);
    }
}

// Very handy command builder
// lambda as fun(){something;} or predefined as fun lambda(args...) {something;}
// LinearCommand([ArgList], lambda).build() to get 'built' one, .debugBuild() to get 'string' format, .process() to process and register command.
// new LinearCommand([['eDemiBolt'], ['x', 'Integer'], ['y', 'Integer'], ['z', 'Integer'], ['direction', 'Enum', Direction.type]], demiBoltTask).process();

// filters materials and maps them to their id
fun filterMaterialsThenMapToId(filter: Function): List {
    mapped = [];
    foreach (material : Material.ALL){
        try {
            if (filter(material)) {
                mapped.append(material.getId());
            }
        } catch (ignored) {

        }
    }
    return mapped;
}

// Suggester for default minecraft stuff
class DefaultSuggester {
    static var ITEMS = new ImmutableList(filterMaterialsThenMapToId(fun(material) material.asItemStack() != null));
    static var BLOCKS= new ImmutableList(filterMaterialsThenMapToId(fun(material) material.asBlock() != null));
    static var DIRECTIONS = ImmutableList.of('up', 'down', 'north', 'east', 'south', 'west');
    static var HORIZONTAL = ImmutableList.of('north', 'east', 'south', 'west');
    static var BIOMES = ImmutableList.of(
        'THE_VOID', 'PLAINS', 'SUNFLOWER_PLAINS', 'SNOWY_PLAINS', 'ICE_SPIKES', 'DESERT', 'SWAMP', 'MANGROVE_SWAMP', 
        'FOREST', 'FLOWER_FOREST', 'BIRCH_FOREST', 'DARK_FOREST', 'OLD_GROWTH_BIRCH_FOREST', 'OLD_GROWTH_PINE_TAIGA', 
        'OLD_GROWTH_SPRUCE_TAIGA', 'TAIGA', 'SNOWY_TAIGA', 'SAVANNA', 'SAVANNA_PLATEAU', 'WINDSWEPT_HILLS', 
        'WINDSWEPT_GRAVELLY_HILLS', 'WINDSWEPT_FOREST', 'WINDSWEPT_SAVANNA', 'JUNGLE', 'SPARSE_JUNGLE', 
        'BAMBOO_JUNGLE', 'BADLANDS', 'ERODED_BADLANDS', 'WOODED_BADLANDS', 'MEADOW', 'GROVE', 'SNOWY_SLOPES', 
        'FROZEN_PEAKS', 'JAGGED_PEAKS', 'STONY_PEAKS', 'RIVER', 'FROZEN_RIVER', 'BEACH', 'SNOWY_BEACH', 
        'STONY_SHORE', 'WARM_OCEAN', 'LUKEWARM_OCEAN', 'DEEP_LUKEWARM_OCEAN', 'OCEAN', 'DEEP_OCEAN', 'COLD_OCEAN', 
        'DEEP_COLD_OCEAN', 'FROZEN_OCEAN', 'DEEP_FROZEN_OCEAN', 'MUSHROOM_FIELDS', 'DRIPSTONE_CAVES', 'LUSH_CAVES', 
        'DEEP_DARK', 'NETHER_WASTES', 'WARPED_FOREST', 'CRIMSON_FOREST', 'SOUL_SAND_VALLEY', 'BASALT_DELTAS', 'THE_END', 
        'END_HIGHLANDS', 'END_MIDLANDS', 'SMALL_END_ISLANDS', 'END_BARRENS'
    ); // Will be deprecated by existance of 'Biome' as type
    static var PROPERTIES_MAP = new ImmutableMap({
        'lit': ['true', 'false'],
        'facing': ['up', 'down', 'north', 'east', 'south', 'west'],
        'face': ['wall', 'ceiling', 'floor'],
        'powered': ['true', 'false'],
        'waterlogged': ['true', 'false'],
        'open': ['true', 'false'],
        'half': ['top', 'down'],
        'axis': ['x','y','z'],
        'extended': ['true', 'false'],
        'delay': ['0','1','2','3'],
        'locked': ['true','false'],
        'shape': ['east_west', 'north_south', 'ascending_west', 'ascending_east', 'ascending_north', 'ascending_south'],
        'mode': ['subtract', 'compare'],
        'persistent': ['true', 'false']
    }); // Will be deprecated by existance of 'Block' as type

    static fun getAvailableProperties(name: String) {
        properties = DefaultSuggester.PROPERTIES_MAP[name];
        if (properties != null) {
            return properties;
        }
        return ImmutableList.EMPTY;
    }
}

class PropertySuggester {
    static var NOTHING = ImmutableList.of("NONE");

    // Suggests properties from block, last index should be block
    static fun getProperties(args...){
        if(len(args) == 0){
            throw new IndexError(0);
        }
        blockName = args.get(len(args) - 1);
        try {
            block = Material.of(blockName).asBlock();
            prop = block.getBlockProperties();
            return prop.getKeys();
        }
        catch (error){
            return PropertySuggester.NOTHING;
        }
    }

    // Suggests properties from block, -1 index = property, -2 index = block
    static fun getPropertyValues(args...){
        if(len(args) <= 1){
            throw new IndexError(1);
        }
        blockName = args.get(len(args) - 2);
        propertyName = args.get(len(args) - 1);
        canSuggest = DefaultSuggester.getAvailableProperties(propertyName);
        if (!canSuggest.isEmpty()){
            return canSuggest;
        }
        try {
            block = Material.of(blockName).asBlock();
            prop = block.getBlockProperties();
            return [prop.get(propertyName)];
        } catch (error){
            return PropertySuggester.NOTHING;
        }
    }

    static fun parseValue(property: String){
        if (property.lowercase() == 'true'){
            return true;
        }
        if (property.lowercase() == 'false'){
            return false;
        }
        try {
            numbervalue = property.toNumber();
            return numbervalue;
        } catch (exception); // ignored
        return property;
    }
}

/* LinearCommand class
    This class is used to create command that executes lambda.
    Example command that calculates sum of two numbers:
    LinearCommand.register(['commandName', 'add', ['a', 'Double'], ['b', 'Double']], fun (a, b) {print(a + b);});
    This command can be executed by typing /commandName add 1 2
    Literals can be covered with [] but its not necessary.
    But, arguments has to be covered with []. Arguments are not necessary, command can be executed without them by lambda with zero arguments.
*/
class LinearCommand{
    // Recursion limit
    static var LIMIT: Number = 15;

    // by creating Queue of arguments and applying DFS, we can create Map of arguments
    var waitingQueue;
    // lambda is function that is executed when all arguments are found
    var lambda;
    var argSet = [];
    // innerDebug is string that can be used to directly construct command.
    var innerDebug = '';
    // innerMap is constructed map of arguments in scope.
    var innerMap = {};
    // scope is Command.then(something.executes(...)) tree structure.
    var innerScope;
    // counts current depth of recursion.
    var recursionCount;
    // description of command
    var description = '';

    LinearCommand(arguments, lambda) {
        // [<a>, <a,b>, <a,b>,...] -> root a, arguments with type b executes lambda
        checkArguments(arguments);
        this.argSet = arguments.copy();
        this.innerDebug = '';
        this.waitingQueue = new Deque();
        foreach (values : arguments){
            this.waitingQueue.enqueue(values);
        }
        this.lambda = lambda;
        this.recursionCount = 0;
    }

    LinearCommand(queue: Deque, lambda, innerScope, recursionCount) : this(queue, lambda, innerScope, recursionCount, '', {});

    LinearCommand(queue: Deque, lambda, innerScope, recursionCount, innerDebug) : this(queue, lambda, innerScope, recursionCount, innerDebug, {});

    LinearCommand(queue: Deque, lambda, innerScope, recursionCount, innerDebug, innerMap) {
        // [<a>, <a,b>, <a,b>,...] -> root a, arguments with type b executes lambda
        this.waitingQueue = queue; // Inherits queue
        this.lambda = lambda;
        this.innerScope = innerScope;
        this.innerDebug = innerDebug;
        this.innerMap = innerMap;
        this.recursionCount = recursionCount;
        if (recursionCount > LinearCommand.LIMIT){
            throw new Error("Argument count maximum is set to " + LinearCommand.LIMIT);
        }
    }
    // registers command to CommandDispatcher
    // example : LinearCommand.register([['baseCommandName'],['someUniqueLiterals'], ['argumentName', 'argumentType', 'Suggester(Function) | suggestingValue | list of suggesting values']], lambda);
    // Suggester should return list of strings, and accept list of arguments as parameter.
    // But Integer and Double can use ['argumentName', 'Integer|Double', min, max] as argument
    static fun register(arguments, lambda) : LinearCommand {
        return new LinearCommand(arguments, lambda).process();
    }

    // example : /exampleCommand literalA <argumentA> <argumentB> calls functionWith2Args(argumentA, argumentB)
    // document : "some description"
    // LinearCommand.register(['exampleCommand','literalA', ['argumentA', ArgumentType, List<String> | Supplier() -> List<String> ], ['argumentB', 'Integer|Double', minValue, maxValue]], functionWith2Args, "some description")
    static fun register(arguments, lambda, description) : LinearCommand {
        return new LinearCommand(arguments, lambda).setDescription(description).process();
    }

    // command = LinearCommand.register(args...).setDescription("some description")
    // document = command.getDescription()
    fun setDescription(description: String) : LinearCommand {
        this.description = description;
        return this;
    }

    fun getDescription() : String {
        return this.description;
    }

    fun build() {
        // Build as linear form directly.
        if (this.waitingQueue.isEmpty()){
            return this.innerScope;
        }
        current = this.waitingQueue.pop();
        // We got something as List anyway.
        tempCommand = '';
        if (Type.of(current) == String.type) {
            tempCommand = CommandBuilder.literal(current);
        }
        else if (Type.of(current).inheritsFrom(Iterable.type)) {
            size = len(current);
            if (size == 1){
                tempCommand = CommandBuilder.literal(current.get(0));
            } else if (size == 2) {
                tempCommand = CommandBuilder.argument(current.get(0), current.get(1));
            } else if (size == 3) { // Suggest args
                tempCommand = CommandBuilder.argument(current.get(0), current.get(1), current.get(2));
            } else if (size > 3) { // Won't process in linear build
                throw new TypeError("Argument was not type of List<ArgName, ArgType, Suggestions> or List<ArgName, ArgType> or List<ArgName>");
            }
        }
        else {
            throw new TypeError("Argument Type was neither String nor Iterable");
        }
        newInnerScope = null;
        if (this.innerScope != null) {
            newInnerScope = tempCommand.then(this.innerScope);
        } else {
            newInnerScope = tempCommand;
        }

        if (this.lambda != null) {
            newInnerScope = newInnerScope.executes(this.lambda); // Terminal execution
        }
        return new LinearCommand(this.waitingQueue, null, newInnerScope, this.recursionCount + 1).build();
    }

    fun debugBuild() {
        if (this.waitingQueue.isEmpty()){
            return this.innerDebug;
        }
        current = this.waitingQueue.pop();
        tempCommand = '';
        if (Type.of(current) == String.type) {
            tempCommand = 'CommandBuilder.literal(' + current + ')';
        }
        else if (Type.of(current).inheritsFrom(Iterable.type)) {
            if (Type.of(current) == String.type){
                tempCommand = 'CommandBuilder.literal(' + current + ')';
            }
            else if (len(current) == 1) {
                tempCommand = 'CommandBuilder.literal(' + current.get(0) + ')';
            } else if (len(current) == 2) {
                tempCommand = 'CommandBuilder.argument(' + current.get(0) + ',' +  current.get(1)+ ')';
            } else if (len(current) > 3) {
                throw new TypeError("Argument was not type of List<ArgName, ArgType, Suggestions> or List<ArgName, ArgType> or list<ArgName>");
            } else if (len(current) == 3) {
                tempCommand = 'CommandBuilder.argument(' + current.get(0) + ',' +  current.get(1)+ ',' + current.get(2) + ')';
            }
        }
        else {
            throw new TypeError("Argument Type was neither String nor Iterable");
        }
        newInnerDebug = '';
        if (this.innerDebug != ''){
            newInnerDebug = tempCommand + '.then('+ this.innerDebug + ')';
        }
        else {
            newInnerDebug = tempCommand;

        }
        if (this.lambda != null){
            newInnerDebug = newInnerDebug + '.executes(lambda)';
        }
        return (new LinearCommand(this.waitingQueue, null, null, this.recursionCount + 1, newInnerDebug)).debugBuild();
    }

    fun internalMapBuild(){
        if (this.waitingQueue.isEmpty()){ //its end of loop
            if (this.lambda == null){
                throw new Error("Command does not execute anything");
            }
            retVal = {"" : this.lambda};
            if(retVal.isEmpty()){
                throw new Error("Return value of final lambda was empty");
            }
            return retVal;
        }
        current = this.waitingQueue.dequeue(); //this time we parse sequentially
        tempArg = '';
        if (Type.of(current) == String.type) {
            tempArg = current;
        }
        else if (len(current) == 1){
            //literal
            tempArg = current.get(0);
        }
        else if (len(current) == 2 || len(current) == 3 || len(current) == 4){
            tempArg = "<"+ current.get(0) +">";
        }
        else {
            throw new TypeError("Argument was not type of List<ArgName, ArgType, Suggestions> or List<ArgName, ArgType> or list<ArgName>");
        }
        innerBuilt = new LinearCommand(this.waitingQueue, this.lambda, null, this.recursionCount + 1, '', {}).internalMapBuild();
        if (innerBuilt.isEmpty()){
            throw new Error("Command definition returned empty map!");
        }
        retVal = {tempArg : innerBuilt};
        return retVal;
    }
    fun internalGetArgMap(){
        if (len(this.argSet) == 0){
            return null;
        }
        argMap = {};
        foreach ( args : this.argSet){
            if (len(args) == 1 || Type.of(args) == String.type){
                continue;
            }
            else if (len(args) == 2){
                //expect Name, Type
                argMap.put(args.get(0), {"type" : args.get(1)});

            }
            else if (len(args) == 3){
                if(args.get(1).lowercase() == 'enum'){
                    argMap.put(args.get(0), {"type" : args.get(1), 'enum' : args.get(2)});
                }
                else if (args.get(2).instanceOf(List.type)){
                    //suggests;
                    argMap.put(args.get(0), {"type" : args.get(1), "suggests" : args.get(2).copy()});
                }
                else {
                    //suggester
                    argMap.put(args.get(0), {"type" : args.get(1), "suggester" : args.get(2)});
                }
            }
            else if (len(args) == 4){
                //minmax
                argMap.put(args.get(0), {"type" : args.get(1), "min" : args.get(2), "max" : args.get(3)});
            }
            else {
                //throw TypeError
                throw new TypeError("Argument was not type of List<ArgName, ArgType, Suggestions> or List<ArgName, ArgType> or list<ArgName> or <Literal>");
            }
        }
        return argMap;
    }
    // returns true if command should be processed as map.
    // Find if there is enum / suggester / minmax argument
    fun shouldProcessAsMap(){
        foreach ( args : this.argSet){
            // check if args is String.
            if (Type.of(args) == String.type){
                continue;
            }
            if (len(args) == 3){
                if(args.get(1).lowercase() == 'enum'){
                    return true;
                }
                if (args.get(2).instanceOf(List.type)){
                    continue;
                }
                else {
                    //suggester
                    return true;
                }
            }
            else if (len(args) == 4){
                //minmax for Integer, Double
                if (args.get(1) != 'Integer' && args.get(1) != 'Double'){
                    throw new TypeError("4 arguments is for Min / Max argument but type was neither Integer nor Double.");
                }
                return true;
            }
        }
        return false;
    }
    // process command.
    fun processMapCommand(){
        MinecraftClient.get().addCommand(this.getMap());
        return this;
    }
    // you can use this to peek what is happening.
    fun getMap(){
        if (this.waitingQueue.isEmpty()){
            throw new Error("Cannot construct map based command from empty arguments");
        }
        name = this.waitingQueue.dequeue();
        // if name is string, then we don't have to get(0). else, we do.
        if (Type.of(name).inheritsFrom(Iterable.type)){
            name = name.get(0);
        }
        if(!name.instanceOf(String.type)){
            throw new TypeError(String.type, Type.of(name));
        }
        subcommands = this.internalMapBuild();
        arguments = this.internalGetArgMap();
        map = {
                    "name" : name,
                    "subcommands": subcommands,
                    "arguments" : arguments
        };
        return map;
    }
    // processes command anyway. Usually its faster to use addCommand if possible, but we checks if it should be processed as map.
    fun process(){
        if (this.shouldProcessAsMap()){
            this.processMapCommand();
            return this;
        }
        MinecraftClient.get().addCommand(this.build());
        return this;
    }
}
