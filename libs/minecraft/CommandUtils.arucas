//Check Argument has Unique names, prevent client crash

client = MinecraftClient.getClient();
//functions for argParse
fun checkArguments(iterable){
    argNames = Set.of();
    foreach( i : iterable){
        if  ( argNames.contains(i)){
            throwRuntimeError("Arguments name should have unique names!");
        }
        argNames.add(i);
    }
}
fun repeatStr(string, count){
    retVal = '';
    while (count > 0){
        retVal = retVal+ string;
        count--;
    }
    return retVal;
}
class MapPrinter{
    static fun showMap(map){
        if (MapPrinter.checkArgs(map)){
            return "" + map;
        }
        retVal = '{';
        foreach ( keys : map.getKeys()){
            if (Type.of(map.get(keys)).getName() == 'Map'){
                retVal = retVal + '\n' + '"'+ keys + '"'+ " : " + MapPrinter.showMap(map.get(keys), 1) + ",";
            }
            else if (Type.of(map.get(keys)).getName() == 'List'){
                retVal = retVal + '\n' +'"' + keys + '"'+ " : " + MapPrinter.showList(map.get(keys),1) + ",";
            }
            else {
                retval = retVal + '\n' +'"' + keys + '"'+ " : " + map.get(keys) + ",";
            }
        }
        return retVal + '\n}';
    }
    static fun showMap(map, indent){
        if (MapPrinter.checkArgs(map)){
            return "" + map;
        }
        retVal = '{';
        foreach ( keys : map.getKeys()){
            if (Type.of(map.get(keys)).getName() == 'Map'){
                retVal = retVal +  '\n'+ repeatStr('    ' , indent+1) +'"'+ keys + '"'+ " : " + MapPrinter.showMap(map.get(keys), indent+1) + ",";
            }
            else if (Type.of(map.get(keys)).getName() == 'List'){
                retVal = retVal +  '\n'+ repeatStr('    ' , indent+1) +'"' + keys + '"'+ " : " + MapPrinter.showList(map.get(keys), indent+1) + ",";
            }
            else {
                retVal = retVal +  '\n'+ repeatStr('    ' , indent+1) +'"' + keys + '"'+ " : " + map.get(keys) + ",";
            }
        }
        return retVal +'\n'+ repeatStr('    ' , indent) + '}';
    }
    static fun showList(list){
        if (MapPrinter.checkArgs(list)){
            return "" + list;
        }
        retVal = '[';
        foreach ( items : list){
            if (Type.of(items).getName() == 'Map'){
                retVal = retVal + '\n' + MapPrinter.showMap(items) + ",";
            }
            else if (Type.of(items).getName() == 'List'){
                retVal = retVal + '\n' + MapPrinter.showList(items) + ",";
            }
            else {
                retVal = retVal + '\n' + items + ",";
            }
        }
        return retVal + '\n]';
    }
    static fun showList(list, indent){
        if (MapPrinter.checkArgs(list)){
            return "" + list;
        }
        retVal = repeatStr('    ' , indent) + '[';
        foreach ( items : list){
            if (Type.of(items).getName() == 'Map'){
                retVal = retVal + '\n' + repeatStr('    ' , indent+1) +MapPrinter.showMap(items) + ",";
            }
            else if (Type.of(items).getName() == 'List'){
                retVal = retVal + '\n' + repeatStr('    ' , indent+1) + MapPrinter.showList(items) + ",";
            }
            else {
                retVal = retVal + '\n' + repeatStr('    ' , indent+1) + items + ",";
            }
        }
        return retVal +'\n'+ repeatStr('    ' , indent) + ']';
    }
    static fun checkArgs(iterable){
        if (Type.of(iterable).getName() == 'Map'){
            foreach (item : iterable.getValues()){
                type = Type.of(item).getName();
                if (type == 'Map' || type == 'List'){
                    return false;
                }
            }
            return true;
        }
        if (Type.of(iterable).getName() == 'List'){
            foreach (item : iterable){
                type = Type.of(item).getName();
                if (type == 'Map' || type == 'List'){
                    return false;
                }
            }
            return true;
        }
        return true;
    }
}
//Very handy command builder
//lambda as fun(){something;}
//LinearCommand([ArgList], lambda).build() to get 'built' one, .debugBuild() to get 'string' format, .process() to process and register command.
//new LinearCommand([['eDemiBolt'], ['x', 'Integer'],['y', 'Integer'],['z', 'Integer'], ['direction', 'Enum', Direction.type]], demiBoltTask).process();

class FILOStack {
    var asList;
    FILOStack(fromList){
        this.asList = [];
        this.asList.addAll(fromList.copy());
    }
    fun popLast(){
        pointer = len(this.asList);
        if(pointer == 0){
            return null;
        }
        val = this.asList.get(pointer - 1);
        this.asList.remove(pointer - 1);
        return val;
    }
    fun pop(){
        pointer = 0;
        if(pointer == len(this.asList)){
            return null;
        }
        val = this.asList.get(pointer);
        this.asList.remove(pointer);
        return val;
    }
    fun hasItems(){
        return !this.asList.isEmpty();
    }
}

class MapSubCommand{
    var name = "essentialCommand"; //default
    var subCommands = {};
    var arguments = {};
    MapSubCommand(){

    }
    MapSubCommand(name, lambda){
        //direct execution
    }
    fun build(){
        return CommandBuilder.fromMap({
            "name" : this.name,
            "subcommands" : this.subcommands,
            "arguments" : this.arguments
        });
    }
}
class LinearCommand{
    var waitingQueue;
    var lambda;
    var argSet = [];
    var command;
    var innerDebug = '';
    var innerMap = {};
    var innerScope;
    var recursionCount;
    LinearCommand(arguments, lambda){
        // [<a>, <a,b>, <a,b>,...] -> root a, arguments with type b executes lambda
        checkArguments(arguments);
        this.argSet = arguments.copy();
        this.innerDebug = '';
        this.waitingQueue = new FILOStack(arguments);
        this.lambda = lambda;
        this.recursionCount = 0;
    }
    LinearCommand(queue, lambda, innerScope, recursionCount){
        // [<a>, <a,b>, <a,b>,...] -> root a, arguments with type b executes lambda
        this.waitingQueue = queue;// inherits queue
        this.lambda = lambda;
        this.innerDebug = '';
        this.innerScope = innerScope;
        this.recursionCount = recursionCount;
        if (recursionCount > 15){
            throwRuntimeError("Argument count maximum is set to 15");
        }
    }
    LinearCommand(queue, lambda, innerScope, recursionCount, innerDebug){
        // [<a>, <a,b>, <a,b>,...] -> root a, arguments with type b executes lambda
        this.waitingQueue = queue;// inherits queue
        this.lambda = lambda;
        this.innerScope = innerScope;
        this.innerDebug = innerDebug;
        this.recursionCount = recursionCount;
        if (recursionCount > 15){
            throwRuntimeError("Argument count maximum is set to 15");
        }
    }
    LinearCommand(queue, lambda, innerScope, recursionCount, innerDebug, innerMap){
        // [<a>, <a,b>, <a,b>,...] -> root a, arguments with type b executes lambda
        this.waitingQueue = queue;// inherits queue
        this.lambda = lambda;
        this.innerScope = innerScope;
        this.innerDebug = innerDebug;
        this.innerMap = innerMap;
        this.recursionCount = recursionCount;
        if (recursionCount > 15){
            throwRuntimeError("Argument count maximum is set to 15");
        }
    }
    fun build(){
        current = this.waitingQueue.popLast();
        if (current == null){
            return this.innerScope;
        }
        //we got something as List anyway.
        tempCommand = '';
        if (len(current) == 1){
            tempCommand = CommandBuilder.literal(current.get(0));
        }
        else if (len(current) == 2) {
            tempCommand = CommandBuilder.argument(current.get(0), current.get(1));
        }
        else if (len(current) == 3){
            //suggest args
            tempCommand = CommandBuilder.argument(current.get(0), current.get(1), current.get(2));
        }
        else if (len(current) > 3){ //won't process in linear build
            throwRuntimeError("Argument was not type of List<ArgName, ArgType, Suggestions> or List<ArgName, ArgType> or list<ArgName>");
        }

        newInnerScope = null;
        if (this.innerScope != null){
            newInnerScope = tempCommand.then(this.innerScope);
        }
        else {
            newInnerScope = tempCommand;
        }
        if (this.lambda != null){
            newInnerScope = newInnerScope.executes(this.lambda); //Terminal execution
        }
        return new LinearCommand(this.waitingQueue, null, newInnerScope, this.recursionCount + 1).build();
    }
    fun debugBuild(){
        current = this.waitingQueue.popLast();
        if (current == null){
            return this.innerDebug;
        }
        //we got something as List anyway.
        tempCommand = '';
        if (len(current) == 1){
            tempCommand = 'CommandBuilder.literal(' + current.get(0) + ')';
        }
        else if (len(current) == 2) {
            tempCommand = 'CommandBuilder.argument(' + current.get(0) + ',' +  current.get(1)+ ')';
        }
        else if (len(current > 3)) {
            throwRuntimeError("Argument was not type of List<ArgName, ArgType, Suggestions> or List<ArgName, ArgType> or list<ArgName>");
        }
        else if (len(current) == 3){
            //suggest args
            tempCommand = 'CommandBuilder.argument(' + current.get(0) + ',' +  current.get(1)+ ',' + current.get(2)+')';
        }
        newInnerDebug = '';
        if (this.innerDebug != ''){
            newInnerDebug = tempCommand + '.then('+ this.innerDebug + ')';
        }
        else {
            newInnerDebug = tempCommand;

        }
        if (this.lambda != null){
            newInnerDebug = newInnerDebug + '.executes(lambda)';
        }
        return (new LinearCommand(this.waitingQueue, null, null, this.recursionCount + 1, newInnerDebug)).debugBuild();
    }
    fun internalMapBuild(){
        current = this.waitingQueue.pop(); //this time we parse sequentially
        if (current == null){ //its end of loop
            if (this.lambda == null){
                throwRuntimeError("Command does not execute anything");
            }
            retVal = {"" : this.lambda};
            if(retVal.isEmpty()){
                throw new Error("Return value of final lambda was empty");
            }
            return retVal;
        }
        tempArg = '';
        if (len(current) == 1){
            //literal
            tempArg = current.get(0);
        }
        else if (len(current) == 2 || len(current) == 3 || len(current) == 4){
            tempArg = "<"+ current.get(0) +">";
        }
        else {
            throwRuntimeError("Argument was not type of List<ArgName, ArgType, Suggestions> or List<ArgName, ArgType> or list<ArgName>");
        }
        innerBuilt = new LinearCommand(this.waitingQueue, this.lambda, null, this.recursionCount + 1, '', {}).internalMapBuild();
        if(innerBuilt.isEmpty()){
            throw new Error("Return value of was empty");
        }
        str = MapPrinter.showMap(innerBuilt);
        //try alternative
        retVal = {};
        retVal.put(tempArg, innerBuilt);
        //retVal = {tempArg : innerBuilt};
        if(retVal.isEmpty()){
            throw new Error("Built inner scope but failed to input in map");
        }
        return retVal;
    }
    fun internalGetArgMap(){
        if (len(this.argSet) == 0){
            return null;
        }
        argMap = {};
        foreach ( args : this.argSet){
            if (len(args) == 1){
                continue;
            }
            else if (len(args) == 2){
                //expect Name, Type
                argMap.put(args.get(0), {"type" : args.get(1)});

            }
            else if (len(args) == 3){
                if(args.get(1).lowercase() == 'enum'){
                    argMap.put(args.get(0), {"type" : args.get(1), 'enum' : args.get(2)});
                }
                else if (Type.of(args.get(2)).getName() == 'List'){
                    //suggests;
                    argMap.put(args.get(0), {"type" : args.get(1), "suggests" : args.get(2).copy()});
                }
                else {
                    //suggester
                    argMap.put(args.get(0), {"type" : args.get(1), "suggester" : args.get(2)});
                }
            }
            else if (len(args) == 4){
                //minmax
                argMap.put(args.get(0), {"type" : args.get(1), "min" : args.get(2), "max" : args.get(3)});
            }
        }
        return argMap;
    }
    fun shouldProcessAsMap(){
        foreach ( args : this.argSet){
            if (len(args) == 3){
                if(args.get(1).lowercase() == 'enum'){
                    return true;
                }
                if (Type.of(args.get(2)).getName() == 'List'){
                    continue;
                }
                else {
                    //suggester
                    return true;
                }
            }
            else if (len(args) == 4){
                //minmax
                if (args.get(1) != 'Integer'){
                    throwRuntimeError("4 arguments is for Min / Max argument but type was not Integer.");
                }
                return true;
            }
        }
        return false;
    }
    fun processMapCommand(){
        name = this.waitingQueue.pop().get(0);
        if(Type.of(name).getName() != 'String'){
            throwRuntimeError("Expected name : <String>  in map, but given name : " + name);
        }
        subcommands = this.internalMapBuild();
        arguments = this.internalGetArgMap();
        map = {
                    "name" : name,
                    "subcommands": subcommands,
                    "arguments" : arguments
                };
        if(map.isEmpty()){
            throw new Error("What is happening now?");
        }
        client.addCommand(
            CommandBuilder.fromMap(
                map
            )
        );
    }
    fun getMap(){
        name = this.waitingQueue.pop().get(0);
        if(Type.of(name).getName() != 'String'){
            throwRuntimeError("Expected name : <String>  in map, but given name : " + name);
        }
        subcommands = this.internalMapBuild();
        arguments = this.internalGetArgMap();
        map = {
                    "name" : name,
                    "subcommands": subcommands,
                    "arguments" : arguments
                };
        if(map.isEmpty()){
            throw new Error("What is happening now?");
        }
        return map;
    }
    fun process(){
        if (this.shouldProcessAsMap()){
            this.processMapCommand();
            return;
        }
        client.addCommand(this.build());
    }
}
