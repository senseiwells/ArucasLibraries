import * from Minecraft;

class MaterialUtils {
    static fun getAxes() {
        return Set.of(Material.WOODEN_AXE, Material.STONE_AXE, Material.GOLDEN_AXE, Material.IRON_AXE, Material.DIAMOND_AXE, Material.NETHERITE_AXE);
    }

    static fun getShovels() {
        return Set.of(Material.WOODEN_SHOVEL, Material.STONE_SHOVEL, Material.GOLDEN_SHOVEL, Material.IRON_SHOVEL, Material.DIAMOND_SHOVEL, Material.NETHERITE_SHOVEL);
    }

    static fun getPickaxes() {
        return Set.of(Material.WOODEN_PICKAXE, Material.STONE_PICKAXE, Material.GOLDEN_PICKAXE, Material.IRON_PICKAXE, Material.DIAMOND_PICKAXE, Material.NETHERITE_PICKAXE);
    }

    static fun getSwords() {
        return Set.of(Material.WOODEN_SWORD, Material.STONE_SWORD, Material.GOLDEN_SWORD, Material.IRON_SWORD, Material.DIAMOND_SWORD, Material.NETHERITE_SWORD);
    }

    static fun getHoes() {
        return Set.of(Material.WOODEN_HOE, Material.STONE_HOE, Material.GOLDEN_HOE, Material.IRON_HOE, Material.DIAMOND_HOE, Material.NETHERITE_HOE);
    }

    static fun getHelmets() {
        return Set.of(Material.LEATHER_HELMET, Material.CHAINMAIL_HELMET, Material.GOLDEN_HELMET, Material.IRON_HELMET, Material.DIAMOND_HELMET, Material.NETHERITE_HELMET);
    }

    static fun getChestplates() {
        return Set.of(Material.LEATHER_CHESTPLATE, Material.CHAINMAIL_CHESTPLATE, Material.GOLDEN_CHESTPLATE, Material.IRON_CHESTPLATE, Material.DIAMOND_CHESTPLATE, Material.NETHERITE_CHESTPLATE);
    }

    static fun getLeggings() {
        return Set.of(Material.LEATHER_LEGGINGS, Material.CHAINMAIL_LEGGINGS, Material.GOLDEN_LEGGINGS, Material.IRON_LEGGINGS, Material.DIAMOND_LEGGINGS, Material.NETHERITE_LEGGINGS);
    }

    static fun getBoots() {
        return Set.of(Material.LEATHER_BOOTS, Material.CHAINMAIL_BOOTS, Material.GOLDEN_BOOTS, Material.IRON_BOOTS, Material.DIAMOND_BOOTS, Material.NETHERITE_BOOTS);
    }

    static fun getRangedWeapons() {
        return Set.of(Material.BOW, Material.TRIDENT, Material.CROSSBOW);
    }
    
    static fun getShulkerBoxes() {
        return Set.of(Material.SHULKER_BOX, Material.WHITE_SHULKER_BOX, Material.ORANGE_SHULKER_BOX, Material.MAGENTA_SHULKER_BOX, Material.LIGHT_BLUE_SHULKER_BOX, Material.YELLOW_SHULKER_BOX, Material.LIME_SHULKER_BOX, Material.PINK_SHULKER_BOX, Material.GRAY_SHULKER_BOX, Material.LIGHT_GRAY_SHULKER_BOX, Material.CYAN_SHULKER_BOX, Material.PURPLE_SHULKER_BOX, Material.BLUE_SHULKER_BOX, Material.BROWN_SHULKER_BOX, Material.GREEN_SHULKER_BOX, Material.RED_SHULKER_BOX, Material.BLACK_SHULKER_BOX);
    }
}

class ItemUtils {
    static fun getItemAsNbtString(item) {
        switch (Type.of(item)) {
            case ItemStack.type -> return item.getFullId() + item.getNbtAsString();
            case Material.type -> return item.getFullId();
        }
        throw new Error("'%s' was not an item".format(item));
    }
}
enum Axis {
    X,
    Y,
    Z,
    NONE;
}
enum Direction {
    DOWN(0, -1, 0, Axis.Y),
    UP(0, 1, 0, Axis.Y),
    NORTH(0, 0, -1, Axis.Z),
    SOUTH(0, 0, 1, Axis.Z),
    WEST(-1, 0, 0, Axis.X),
    EAST(1, 0, 0, Axis.X),
    NONE(0, 0, 0, Axis.NONE); //Actual ordinals of minecraft directions.

    var vector;
    var axis;
    Direction(x, y, z, axis) {
        this.vector = new PosWithFun(x, y, z);
        this.axis = axis;
    }

    fun getOpposite() {
        switch (this) {
            case Direction.NORTH -> return Direction.SOUTH;
            case Direction.SOUTH -> return Direction.NORTH;
            case Direction.EAST -> return Direction.WEST;
            case Direction.WEST -> return Direction.EAST;
            case Direction.UP -> return Direction.DOWN;
            case Direction.DOWN -> return Direction.UP;
        }
        return Direction.NONE;
    }

    fun right() {
        switch(this) {
            case Direction.NORTH -> return Direction.EAST;
            case Direction.EAST -> return Direction.SOUTH;
            case Direction.SOUTH -> return Direction.WEST;
            case Direction.WEST -> return Direction.NORTH;
        }
        return Direction.NONE;
    }

    fun rotateYClockwise() {
        return this.right();
    }

    fun left() {
        switch(this) {
            case Direction.NORTH -> return Direction.WEST;
            case Direction.WEST -> return Direction.SOUTH;
            case Direction.SOUTH -> return Direction.EAST;
            case Direction.EAST -> return Direction.NORTH;
        }
        return Direction.NONE;
    }
    fun rotateYCounterClockwise() {
        return this.left();
    }

    fun getAxis(){
        return this.axis;
    }

    fun asVector() {
        return this.vector.copy();
    }

    fun getX() {
        return this.vector.getX();
    }

    fun getY() {
        return this.vector.getY();
    }

    fun getZ() {
        return this.vector.getZ();
    }

    fun toString() {
        return this.getName().lowercase();
    }

    fun isValid(){
        return this != Direction.NONE;
    }

    fun mult(value){
        return this.vector.mult(value);
    }

    fun equals(other){
        return this == other;
    }
    static fun getEntityFacingFirst(entity) {
        facing = Direction.getEntityFacingOrdered(entity);
        if (facing.isEmpty()) {
            return Direction.NONE;
        }
        return facing[0];
    }

    static fun getEntityFacingOrdered(entity) {
        if (entity.instanceOf(Entity.type)) {
            pitch = entity.getPitch() * (Math.pi / 180);
            yaw = -1 * entity.getYaw() * (Math.pi / 180);
            pSin, pCos, ySin, yCos = [Math.sin(pitch), Math.cos(pitch), Math.sin(yaw), Math.cos(yaw)];

            x, y, z = [null, null, null];
            if (ySin > 0) {
                x = Direction.EAST;
            } else {
                x = Direction.WEST;
                ySin = -ySin;
            }
            if (pSin < 0) {
                y = Direction.UP;
                pSin = -pSin;
            } else {
                y = Direction.DOWN;
            }
            if (yCos > 0) {
                z = Direction.SOUTH;
            } else {
                z = Direction.NORTH;
                yCos = -yCos;
            }

            theta = ySin * pCos;
            omega = yCos * pCos;
            if (ySin > yCos) {
                if (pSin > theta) {
                    return Direction.listClosest(y, x, z);
                } else if (omega > pSin) {
                    return Direction.listClosest(x, z, y);
                }
                return Direction.listClosest(x, y, z);
            } else if (pSin > omega) {
                return Direction.listClosest(y, z, x);
            } else if (theta > pSin) {
                return Direction.listClosest(z, x, y);
            }
            return Direction.listClosest(z, y, x);

        }
        return [];
    }

    static fun listClosest(first, second, third) {
        return [first, second, third, third.getOpposite(), second.getOpposite(), first.getOpposite()];
    }

    static fun fromString(string) {
        if (Type.of(string) == String.type) {
            switch(string.lowercase()) {
                case "north" -> return Direction.NORTH;
                case "east" -> return Direction.EAST;
                case "south" -> return Direction.SOUTH;
                case "west" -> return Direction.WEST;
                case "up" -> return Direction.UP;
                case "down" -> return Direction.DOWN;
            }
        }
        return Direction.NONE;
    }
    static fun values(){
        return [Direction.UP, Direction.DOWN, Direction.EAST, Direction.WEST, Direction.SOUTH, Direction.NORTH];
    }
    static fun horizontal(){
        return [Direction.EAST, Direction.WEST, Direction.SOUTH, Direction.NORTH];
    }
}
