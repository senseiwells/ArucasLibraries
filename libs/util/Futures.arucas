//Arucas 1.3.0+
class Futures {
    var futures = [];
    Futures(apply, argSet){
        foreach (args : apply){
            this.futures.append(new Task(fun(){return apply(args);}).run());
        }
    }
    Futures(tasks){
        foreach (task : tasks){
            this.futures.append(task.run());
        }
    }
    fun anyOf(args...){
        block = true;
        if (len(args) == 0){
            //default behavior, block thread
            block = true;
        }
        else {
            block = args.get(0) == true;
        }
        while (true){
            foreach (future : this.futures){
                if (future.isComplete()){
                    return new Chain(future.get());
                }
            }
            if (!block){
                return null;
            }
        }
    }
    fun allOf(args...){
        holder = [];
        block = true;
        if (len(args) == 0){
            //default behavior, block thread
            block = true;
        }
        else {
            block = args.get(0) == true;
        }
        while (true){
            _i = 0;
            foreach (future : this.futures.copy()){
                if (future.isComplete()){
                    holder.append(future.await());
                    this.futures.remove(_i);
                    _i--;
                }
                _i++;
            }
            if (!block || this.futures.isEmpty()){
                return new Chain(holder);
            }
        }
    }
    fun then(modifier){
        newFuture = [];
        foreach ( future : this.futures.copy()){
            newFuture.append(new Task().then(fun (){return modifier(future.await());}));
        }
        return new Futures(newFuture);
    }
    fun join(){
        result = [];
        foreach (future : this.futures){
            result.addAll(future.await());
        }
        return result;
    }
    fun isComplete(){
        foreach (future : this.futures){
            if (!future.isComplete()){
                return false;
            }
        }
        return true;
    }
    fun await(){
        foreach (future : this.futures){
            future.await();
        }
    }
    fun stop(){
        foreach ( future : this.futures){
            //notImplemented
        }
    }
}

class Chain {
    var object;
    Chain(object){
        this.object = object;
    }
    fun then(modifier){
        return new Chain(modifier(object));
    }
    fun get(){
        if (Type.of(this.object).getName() == 'Future' ){
            return this.object.await();
        }
        return this.object;
    }
}