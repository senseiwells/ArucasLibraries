import StringBuilder from util.StringUtils;

// Function that creates a new node
// cannot be accessed outside this file
newNode = null;
/* private */ {
    class Node {
        var value;
        var next;
    
        Node(value) {
            this.value = value;
            this.next = null;
        }

        fun toString() {
            return this.value.toString();
        }
    }

    newNode = fun(value) {
        return new Node(value);
    };
}

/**
 * Stack data strucutre using linked nodes
 * FIFO with basic methods
 */
class LinkedStack {
    var current;

    /**
     * Constructs a new LinkedStack
     */
    LinkedStack() {
        this.current = null;
    }

    /**
     * Checks if the stack is empty
     * Returns - Boolean: whether the stack is empty
     */
    fun isEmpty() {
        return this.current == null;
    }

    /**
     * This pushes a new value to the top of the stack
     * Parameter - Value (value): the value to add to the stack
     */
    fun push(value) {
        nextNode = newNode(value);
        nextNode.next = this.current;
        this.current = nextNode;
    }

    /**
     * This removes the value at the top of the stack
     * Returns - Value: the value that was at the top
     * Throws - Error: Stack is empty
     */
    fun pop() {
        if (this.isEmpty()) {
            throw new Error("Stack is empty");
        }
        currentNode = this.current;
        this.current = this.current.next;
        return currentNode.value;
    }

    /**
     * This peeks at the value at the top of the stack
     * Returns - Value: the value at the top of stack
     * Throws - Error: Stack is empty
     */
    fun peek() {
        if (this.isEmpty()) {
            throw new Error("Stack is empty");
        }
        return this.current.value;
    }

    /**
     * Converts the stack to a list,
     * with the top of the stack being first
     * Returns - List: the stack as a list
     */
    fun toList() {
        list = [];
        current = this.current;
        while (current != null) {
            list.append(current);
            current = current.next;
        }
        return list;
    }

    /**
     * Creates a string representation
     * of the stack
     * Returns - String: the string representation
     */
    fun toString() {
        builder = new StringBuilder("Stack{");
        current = this.current;
        while (current != null) {
            builder + current;
            current = current.next;
            if (current != null) {
                builder + ", ";
            }
        }
        return (builder + "}").toString();
    }
}

/**
 * Queue data strucutre using linked nodes
 * FILO with basic methods
 */
class LinkedQueue {
    /**
     * The node that is at the
     * front of the queue
     */
    var head;
    /**
     * The node that is at the
     * end of the queue
     */
    var tail;

    /**
     * Constructs a new LinkedQueue
     */
    LinkedQueue() {
        this.head = this.tail = null;
    }

    /**
     * Checks whether the queue is empty
     * Returns - Boolean: whether the queue is empty
     */
    fun isEmpty() {
        return this.head == null;
    }

    /**
     * Adds a value to the end of the queue
     * Parameter - Value (value): the value to add to the queue
     */
    fun enqueue(value) {
        nextNode = newNode(value);
        if (this.isEmpty()) {
            this.head = this.tail = nextNode;
        } else {
            this.tail = this.tail.next = nextNode;
        }
    }

    /**
     * Removes the value at the start of the queue
     * Returns - Value: the value at the start of the queue
     * Throws - Error: Queue is empty
     */
    fun dequeue() {
        if (this.isEmpty()) {
            throw new Error("Queue is empty");
        }
        head = this.head;
        this.head = this.head.next;
        return head.value;
    }

    /**
     * Gets the value at the front of the queue
     * Returns - Value: the value at the front of the queue
     * Throws - Error: Queue is empty
     */
    fun front() {
        if (this.isEmpty()) {
            throw new Error("Queue is empty");
        }
        return this.head.value;
    }

    /**
     * Gets the value at the end of the queue
     * Returns - Value: the value at the end of the queue
     * Throws - Error: Queue is empty
     */
    fun end() {
        if (this.isEmpty()) {
            throw new Error("Queue is empty");
        }
        return this.tail.value;
    }

    /**
     * Converts the queue to a list,
     * with the start of the queue being first
     * Returns - List: the queue as a list
     */
    fun toList() {
        list = [];
        head = this.head;
        while (head != null) {
            list.append(head);
            head = head.next;
        }
        return list;
    }

    /**
     * Creates a string representation
     * of the queue
     * Returns - String: the string representation
     */
    fun toString() {
        builder = new StringBuilder("Queue{");
        head = this.head;
        while (head != null) {
            builder + head;
            head = head.next;
            if (head != null) {
                builder + ", ";
            }
        }
        return (builder + "}").toString();
    }
}

class DefaultedMap {
    var map;
    var defaultValue = null;
    DefaultedMap(items){
        this.map = {};
        foreach (item : items){
            this.map.put(item, this.defaultValue);
        }
    }
    DefaultedMap(items, defaultValue){
        this.map = {};
        this.defaultValue = defaultValue;
        foreach (item : items){
            this.map.put(item, this.defaultValue);
        }
    }
    fun addAll(values){
        if (Type.of(values).getName() == 'List'){
            foreach (item : values){
                this.map.put(item, this.defaultValue);
            }
        }
        else {
            this.map.addAll(values);
        }
    }
    fun getValues(){
        return this.map.getValues();
    }
    fun containsKey(key){
        return this.map.conatinsKey();
    }
    fun putAll(other){
        this.map.putAll(other);
    }
    fun addList(other){
        this.map.putAll(new DefaultedMap(other).map);
    }
    fun get(key){
        return this.map.get(key);
    }
    fun isEmpty(){
        return this.map.isEmpty();
    }
    fun clear(){
        this.map.clear();
    }
    fun toString(){
        return this.map.toString();
    }
    fun getKeys(){
        return this.map.getKeys();
    }
    fun putIfAbsent(key, value){
        return this.map.putIfAbsent(key, value);
    }
    fun remove(key){
        if (key == null){
            return null;
        }
        return this.map.remove(key);
    }
    fun put(key, value){
        return this.map.put(key, value);
    }
    fun put(key){
        return this.map.put(key, this.defaultValue);
    }
    fun poll(){
        if (!this.isEmpty())
            return this.map.getKeys().get(0);
    }
}
